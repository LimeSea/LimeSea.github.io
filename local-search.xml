<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>c++基础整理(基本类型和变量)</title>
    <link href="/2021/07/19/c++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E9%83%A8%E5%88%86/c++_jc_1/"/>
    <url>/2021/07/19/c++%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E9%83%A8%E5%88%86/c++_jc_1/</url>
    
    <content type="html"><![CDATA[<h1 id="c-基础整理-基本类型和变量"><a href="#c-基础整理-基本类型和变量" class="headerlink" title="c++基础整理(基本类型和变量)"></a>c++基础整理(基本类型和变量)</h1><p><img src="https://gitee.com/LimeSae/blogimage/raw/master/img/21_7_19_1.png"></p><h2 id="基本内置类型"><a href="#基本内置类型" class="headerlink" title="基本内置类型"></a>基本内置类型</h2><p>c++中，基本的内置类型有两种：</p><ul><li>算数类型</li><li>字面值常量<h3 id="算数类型"><a href="#算数类型" class="headerlink" title="算数类型"></a>算数类型</h3>算数类型分为<strong>整形</strong>和<strong>浮点形</strong>两种，整形包含了大多数的类型如bool和char都是属于整形。<br>基本的类型有：  </li><li>int 整形</li><li>long 长整型</li><li>long long 长整型</li><li>bool 布尔类型</li><li>char 字符</li><li>wchar_t 宽字符</li><li>char16_t Unicode字符</li><li>char32_t Unicode字符</li><li>short 短整型</li><li>float 单精度浮点数</li><li>double 双精度浮点数</li><li>long double 扩展精度浮点数<h3 id="字面值类型"><a href="#字面值类型" class="headerlink" title="字面值类型"></a>字面值类型</h3>形如数字4，字符’a’的被称为字面值类型。字面值类型有各自对应的基本类型。  <h4 id="转移序列"><a href="#转移序列" class="headerlink" title="转移序列"></a>转移序列</h4>字面值类型中有一类比较特殊的是转义序列，转移序列是不可打印的。<br><img src="https://gitee.com/LimeSae/blogimage/raw/master/img/21_7_19_2.png"></li></ul><h3 id="类型转换问题"><a href="#类型转换问题" class="headerlink" title="类型转换问题"></a>类型转换问题</h3><p>将浮点型转换为整形时，会直接去掉小数部分。类型转换时原本的值如果超过转换的类型所能表示的最大长度时，程序会发生不可预测的问题。<br>如果是非0的值转换为bool型时都是true，如果是0则为false。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>c++初始化变量的方式有多种</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">i</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-keyword">int</span> i&#123;<span class="hljs-number">0</span>&#125;;<br></code></pre></td></tr></table></figure><p>上面的初始化的第三种方式称为<strong>列表初始化</strong>，列表初始化在发生数据精度丢失时会给出警告。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">double</span> i=<span class="hljs-number">0.1</span>;<br><span class="hljs-keyword">int</span> n&#123;i&#125;;<br></code></pre></td></tr></table></figure><p>上面的编译无法通过。<br>初始时可以默认初始，默认初始化即给予默认的值，如果默认初始化发生在函数内，则不会初始化，如果使用不被初始化的值将会发生错误</p><h3 id="声明和定义"><a href="#声明和定义" class="headerlink" title="声明和定义"></a>声明和定义</h3><p>声明的意思是告诉程序该变量存在，可以单独的声明变量不定义变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> i;<span class="hljs-comment">//声明变量</span><br><span class="hljs-keyword">int</span> i;<span class="hljs-comment">//声明并且定义变量 </span><br></code></pre></td></tr></table></figure><p>如果想要在一个文件中调用另一个文件中的变量，则需要在调用的那个文件中声明要调用的变量，在原本的文件包含的头文件中也要声明该变量。</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>c++内置了一些标识符，定义变量的时候不能和标识符同名。<br><img src="https://gitee.com/LimeSae/blogimage/raw/master/img/2021-07-19-3.png"></p><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>变量定义的时候拥有其作用域，比如在一个函数中时，其作用域就是这个函数内。<br>变量的的作用域可以进行嵌套，嵌套时存在<strong>外层作用域</strong>和<strong>内层作用域</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-comment">//外层作用域的i</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<span class="hljs-comment">//内层作用域的i</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;<span class="hljs-comment">//内层作用域的i 输出1</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>&lt;&lt;::i&lt;&lt;<span class="hljs-built_in">std</span>::ensl;<span class="hljs-comment">//外层作用域的i 输出0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在内层作用域中，会先寻找最近作用域中变量。可以使用::来访问外层作用域的变量。</p><h2 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h2><p>复合类型时建立在基础类型之上的类型。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针是一种灵活且强大的数据类型，它允许直接对系统的内存进行操作，正因为可以直接对内存可以操作，所以乱用指针会造成巨大的隐患以及严重时使得系统崩溃。</p><h4 id="指针的定义"><a href="#指针的定义" class="headerlink" title="指针的定义"></a>指针的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> *p=<span class="hljs-literal">nullptr</span>;<span class="hljs-comment">//空指针</span><br><span class="hljs-keyword">int</span> *m=&amp;i;<span class="hljs-comment">//将m指向i</span><br></code></pre></td></tr></table></figure><p>在定义指针时可以让其指向空指针NULL，NULL是C语言中定义的，在c++中还提供了另一种空指针nullptr。nullptr是一种特殊的字面值常量，常常为0;<br>在初始化指针时可以使用&amp;来获取变量的地址赋值给指针。<br>对于指针，指向的是变量，指针自己本身表示的是所指的变量的地址。可以通过解引用来访问所指向的地址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> *m=&amp;i;<br>*m=<span class="hljs-number">1</span>;<span class="hljs-comment">//对指针解引用 i的值变为1</span><br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用相当于变量的别名，可以通过引用来修改变量。</p><h4 id="引用的定义"><a href="#引用的定义" class="headerlink" title="引用的定义"></a>引用的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> &amp;m=i;<span class="hljs-comment">//对i进行引用</span><br></code></pre></td></tr></table></figure><p>引用有点类似于指针，但是却又不同于指针。指针是存储地址，通过地址来访问所指向的变量。引用则是变量的别名，直接可以访问变量来修改变量。  </p><ul><li>引用在定义时必须要指明所引用的变量。  <h2 id="const类型修饰符"><a href="#const类型修饰符" class="headerlink" title="const类型修饰符"></a>const类型修饰符</h2>const用于修饰那些不会改变的变量。试图对const修饰过的变量进行修改时编译器会报错。<h3 id="const和引用"><a href="#const和引用" class="headerlink" title="const和引用"></a>const和引用</h3>const引用会使得不能通过当前的别名修改变量，const引用可以引用非const变量。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;q=n;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;m=i;<br></code></pre></td></tr></table></figure>const引用可以绑定非本类型的变量，在绑定时编译器会隐式声明一个和引用类型一样的临时两来使绑定正常。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">double</span> i=<span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;m=i;<br></code></pre></td></tr></table></figure>上面段代码会转换成：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">double</span> i=<span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> temp=i;<span class="hljs-comment">//临时两temp</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;m=temp;<br></code></pre></td></tr></table></figure><h3 id="const和指针"><a href="#const和指针" class="headerlink" title="const和指针"></a>const和指针</h3>指针本身表示了变量地址，也能表示所指向的变量，所以指针的const有两层含义，第一层含义是指针本身不可变，另一层是所指向的变量不可变。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *p=&amp;i;<span class="hljs-comment">//所指向的变量的值不能改变，即不能通过指针更改变量</span><br><span class="hljs-keyword">int</span> * <span class="hljs-keyword">const</span> cp=&amp;i;<span class="hljs-comment">//指针本身是const，不能改变指针本身的指向</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> ccp=&amp;i;<span class="hljs-comment">//不能更改指向且不能更改所指向的变量的值</span><br></code></pre></td></tr></table></figure>const指针也可以指向非常量的变量，这一点和引用一样。<h3 id="顶层const和底层const"><a href="#顶层const和底层const" class="headerlink" title="顶层const和底层const"></a>顶层const和底层const</h3>对于指针，存在顶层const和底层const。广泛的，顶层const表示本身不可变，底层const表示所指向的内容不可变。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-comment">//顶层const</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *pi=&amp;i;<span class="hljs-comment">//底层const</span><br><span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> tpi=&amp;i;<span class="hljs-comment">//底层const</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> ccp=&amp;i;<span class="hljs-comment">//既是顶层又是底层const</span><br></code></pre></td></tr></table></figure>有一点不同的是，用于引用的const都是底层const。<h3 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h3>c++中有常量表达式的概念，常量表达式即在编译的过程中就可以确定固定的值，不同于const，const的值可能在运行时才会决定是多少。<br>常量表达式可以用constexpr来声明，编译器会检查是否可以在编译期间获得具体值。<br>指针如果要是constexpr类型，则必须初始化为nullptr类型。<h2 id="处理类型"><a href="#处理类型" class="headerlink" title="处理类型"></a>处理类型</h2>有时候我们不知道我们所要定义的类型时，可以通过一些关键字来自动获取。<h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3>auto会自动的获取当前变量的类型来定义变量。<br>auto在推断变量类型时，一般会忽略掉顶层const，保留底层const;<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">auto</span> in=i;<span class="hljs-comment">//in为const int</span><br><span class="hljs-keyword">auto</span> ip=&amp;i;<span class="hljs-comment">//ip为const int *</span><br></code></pre></td></tr></table></figure><h3 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h3>decltype通过判断类型来定义变量，不同的一点是，decltype可以判断函数的返回值来定义变量<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>,b=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">decltype</span>(a+b) i;<span class="hljs-comment">//判断a+b的类型</span><br><span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">string</span>::size()) strl;<span class="hljs-comment">//size_t类型</span><br></code></pre></td></tr></table></figure>如果对括号内的处理内容再加上一层括号的话，就会转成引用类型。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">int</span> a=<span class="hljs-number">0</span>,b=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">decltype</span>((a+b)) i=&amp;a;<span class="hljs-comment">//i为int &amp;类型</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言编译流程简单整理以及简单makefile编写</title>
    <link href="/2021/04/20/21-4-21-1/"/>
    <url>/2021/04/20/21-4-21-1/</url>
    
    <content type="html"><![CDATA[<h1 id="c语言编译流程简单整理以及简单makefile编写"><a href="#c语言编译流程简单整理以及简单makefile编写" class="headerlink" title="c语言编译流程简单整理以及简单makefile编写"></a>c语言编译流程简单整理以及简单makefile编写</h1><pre><code>前言: 最近接触了makefile。为了学习makefile，就去了解了部分需要的知识，目前先简单的整理在这里。</code></pre><h2 id="c语言编译过程"><a href="#c语言编译过程" class="headerlink" title="c语言编译过程"></a>c语言编译过程</h2><p>C语言在编译过程中一共有四个步骤，通过这个四个步骤，才能形成正常可执行的程序。<br> <img src="21_4_20_1.png"></p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>首先需要做的就是预处理，预处理顾名思义，预先处理。预处理会将代码中宏定义以及一些其他的东西替换为原本的代码。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ gcc -E <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -o <span class="hljs-selector-tag">main</span>.i<br></code></pre></td></tr></table></figure><p>通过gcc的-E命令可以对.c做预处理，-o是预处理后生成的文件名。生成的.i文件和原本的.c文件相差不是很大，还是c语言的格式，如果打开一个.i文件还是可以看的懂的。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译就会将整个代码翻译成对应的汇编文件，也就是汇编的代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -S <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.i</span><br></code></pre></td></tr></table></figure><p>调用gcc的-S命令可以将.i文件进行编译，编译完会产生对应.i文件名字的.s文件，这时候的代码就是对应机器的汇编代码了。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>通过汇编，代码就会转变成对应的二进制代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc -C <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.s</span><br></code></pre></td></tr></table></figure><p>调用gcc的-C命令可以将.s文件进行编译，编译完会产生对应.o文件名字的.s文件，这时候的文件里面的内容就完全是二进制的代码了。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>经过上面的步骤，生成的.o文件还不能正常执行，在.c代码开头包含的头文件啊什么的，还没被加载进来，头文件都已经经过编译了，这时候就需要进行链接，来做最后的组装工作，只有正常的组装后，才可以正常执行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.o</span> -o <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure><p>通过上面这行命令，就可以胜场main文件了，如果不指定名字，默认输出a.out。main文件是和a.out是一样的。</p><h2 id="简单的makefile编写"><a href="#简单的makefile编写" class="headerlink" title="简单的makefile编写"></a>简单的makefile编写</h2><p>了解了基本的编译过程后，单个文件还好说，可以敲几行命令行，可以文件多起来了，这个时候就不好说了，这个时候就需要找到一个解放双手的脚本。<br>makefile的作用就是对整个工程文件配置编译过程的文件，相当于工程编译配置。通过这个文件，可以快速的编译整个工程，而不需要每次都写那么长的命令。<br>下面的是简单makefile的写法</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>makefile的基本语法是由三部分组成的</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">目标:依赖</span><br>    命令<br></code></pre></td></tr></table></figure><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>目标是命令执行后生成的文件，命令是否执行取决于命令的依赖项是否被改动，如果没改动，就不会执行。</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>目标生成时需要的依赖文件。</p><h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><p>命令就是生成目标文件时所需要执行的命令。</p><p>编译一个程序的时候，我们可以这么写</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.out</span>:<span class="hljs-selector-tag">main</span>.c<br>    gcc <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.c</span> -o <span class="hljs-selector-tag">main</span>.out<br></code></pre></td></tr></table></figure><p>这样的话，执行make时就可以生成可执行文件main.out。<br>这就是makefile的最基本使用。</p><h3 id="两个常用函数"><a href="#两个常用函数" class="headerlink" title="两个常用函数"></a>两个常用函数</h3><p>当原文件多了时，我们当然不希望一次性输入大量的原文件名字。makefile提供两个函数来帮我们简化这个过程。  </p><ol><li>wildcard  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">SRC = <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span><br></code></pre></td></tr></table></figure>我们可以将所有文件赋值给一个变量，上面的函数会将当前目录下所有后缀为.c的文件赋值给SRC。  </li><li>patsubst<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">OBJ = <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> %.c, %.o, <span class="hljs-variable">$(SRC)</span>)</span><br></code></pre></td></tr></table></figure>上面这行代码的意思是将SRC中的.c替换为.o赋值给OBJ。</li></ol><p>有了上面两个函数，我们就可以这样写了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">SRC = <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span><br>OBJ = <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> %.c, %.o, <span class="hljs-variable">$(SRC)</span>)</span><br><br><span class="hljs-variable">$(OBJ)</span>:<span class="hljs-variable">$(SRC)</span><br>    gcc -C <span class="hljs-variable">$(SRC)</span> -o <span class="hljs-variable">$(OBJ)</span><br><span class="hljs-section">main.out:<span class="hljs-variable">$(OBJ)</span></span><br>    gcc <span class="hljs-variable">$(OBJ)</span> -o main.out<br></code></pre></td></tr></table></figure><p>这里还有一些常用变量可以简化代码</p><ol><li>$@:表示目标  </li><li>$&lt;:依赖中第一个条件  </li><li>$^:依赖中所有文件</li></ol><p>有了上面这些变量后，就可以简化成下面这样了。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs makefile">SRC = <span class="hljs-variable">$(<span class="hljs-built_in">wildcard</span> ./*.c)</span><br>OBJ = <span class="hljs-variable">$(<span class="hljs-built_in">patsubst</span> %.c, %.o, <span class="hljs-variable">$(SRC)</span>)</span><br><br><span class="hljs-variable">$(OBJ)</span>:<span class="hljs-variable">$(SRC)</span><br>    gcc -C <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br><span class="hljs-section">main.out:<span class="hljs-variable">$(OBJ)</span></span><br>    gcc <span class="hljs-variable">$^</span> -o <span class="hljs-variable">$@</span><br></code></pre></td></tr></table></figure><pre><code>THE END:    目前先整理这样，等继续学习后再来完善makefile部分的语法。</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>makefile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript的深拷贝和浅拷贝</title>
    <link href="/2021/03/01/javascript%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/03/01/javascript%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>JavaScript的数据类型分为两类，<strong>基本数据类型</strong>和<strong>引用数据类型</strong>，基本类型的数据和引用类型的数据存储方式不一样，基本类型数据是存在栈中的，而引用数据类型是分两部分存的，引用数据类型的变量名字存在栈中，而值存在堆中，栈中相当于存的是值的指针。<br>目前JavaScript中的基本数据类型有Boolean、Null、Undefined、Number、String、Symbol。引用数据类型有Object、Array、Function、RegExp、Date。<br>JavaScript中的深拷贝和浅拷贝是针对引用数据类型的。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝只是浅层的拷贝，对于引用数据类型，浅拷贝就是复制了一份栈中的指针给被赋值的变量。新变量操纵的还是原有变量指向的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = &#123;<br>    b: <span class="hljs-number">100</span><br>&#125;<br><span class="hljs-keyword">var</span> c = a;<br>c.b = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a.b);<span class="hljs-comment">//a.b=1 c.b=1</span><br></code></pre></td></tr></table></figure><p>上面的这种方式就是浅拷贝，其中c和a指向的是同一个堆地址，所以在修改c时a也被修改。</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝是相对于浅拷贝的，深拷贝要做到对引用变量的整体拷贝，也就是把堆中的值也拷贝过来，这时候，修改新变量的值不会对原有变量产生影像。那我们如何做到深拷贝呢？</p><h3 id="暴力深拷贝"><a href="#暴力深拷贝" class="headerlink" title="暴力深拷贝"></a>暴力深拷贝</h3><p>我们知道，对一个基本变量类型的拷贝，是可以完全不对原有变量的值造成影响的。并且每个引用类型都是由基本数据类型构成的。所以可以考虑使用暴力方法把对象的每一层都进行基本类型的拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> deepclone = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Array</span>.isArray(obj):[]?&#123;&#125;;<br>       <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> (obj) === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>                <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> (obj[key] === <span class="hljs-string">&quot;object&quot;</span>)) &#123;<br>                    result[key] = deepclone(obj[key]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[key] = obj[key];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方法就是通过暴力的方法来进行每一层的复制的深拷贝，但是这个方法存在存在可能成环的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> deepclone = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, parent = <span class="hljs-literal">null</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;<br>    <span class="hljs-keyword">let</span> _parent = parent;<br>    <span class="hljs-keyword">while</span> (_parent) &#123;<br>        <span class="hljs-keyword">if</span> (_parent.originalParent === obj) &#123;<br>            <span class="hljs-keyword">return</span> _parent.currentResult;<br>        &#125;<br>        _parent = _parent.parent;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> (obj) === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>                <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> (obj[key] === <span class="hljs-string">&quot;object&quot;</span>)) &#123;<br>                    result[key] = deepclone(obj[key], &#123;<br>                        parent: parent,<br>                        originalParent: obj,<br>                        currentResult: result<br>                    &#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[key] = obj[key];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个方法则可以避免成环问题。</p><h3 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h3><p>通过自带的<strong>slice()</strong>,可以实现一维数组的深拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> arr2=arr1.slice();<br><span class="hljs-built_in">console</span>.log(arr1);<span class="hljs-comment">//&#123;3,4,5&#125;</span><br><span class="hljs-built_in">console</span>.log(arr2);<span class="hljs-comment">//&#123;3,4,5&#125;</span><br></code></pre></td></tr></table></figure><p>上面这个方法只对一维数组有用，多维数组的话还是浅拷贝。</p><h3 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h3><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p>Object.assign()可以对一维对象进行拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1=&#123;<br>    a:<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">var</span> obj2=<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,obj1);<br></code></pre></td></tr></table></figure><p>如果是多维对象，那这个方法就不适用了，多维中的其他对象依旧会是浅拷贝。</p><h4 id="JSON-parse-JSON-stringify-obj"><a href="#JSON-parse-JSON-stringify-obj" class="headerlink" title="JSON.parse(JSON.stringify(obj))"></a>JSON.parse(JSON.stringify(obj))</h4><p>这个方法是用了JSON的方法，JSON.stringify(obj)会将对象转换为字符串，然后JSON.parse会将字符串转换为对象。通过这个方法可以实现多维对复制，但会忽略undefined和任意的函数以及symbol。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1=&#123;<br>    a:<span class="hljs-number">1</span>,<br>    b:&#123;<br>        c:<span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj2=<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj1));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
