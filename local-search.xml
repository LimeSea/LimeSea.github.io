<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javascript的深拷贝和浅拷贝</title>
    <link href="/2021/03/01/javascript%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2021/03/01/javascript%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>JavaScript的数据类型分为两类，<strong>基本数据类型</strong>和<strong>引用数据类型</strong>，基本类型的数据和引用类型的数据存储方式不一样，基本类型数据是存在栈中的，而引用数据类型是分两部分存的，引用数据类型的变量名字存在栈中，而值存在堆中，栈中相当于存的是值的指针。<br>目前JavaScript中的基本数据类型有Boolean、Null、Undefined、Number、String、Symbol。引用数据类型有Object、Array、Function、RegExp、Date。<br>JavaScript中的深拷贝和浅拷贝是针对引用数据类型的。</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝只是浅层的拷贝，对于引用数据类型，浅拷贝就是复制了一份栈中的指针给被赋值的变量。新变量操纵的还是原有变量指向的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = &#123;<br>    b: <span class="hljs-number">100</span><br>&#125;<br><span class="hljs-keyword">var</span> c = a;<br>c.b = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.log(a.b);<span class="hljs-comment">//a.b=1 c.b=1</span><br></code></pre></td></tr></table></figure><p>上面的这种方式就是浅拷贝，其中c和a指向的是同一个堆地址，所以在修改c时a也被修改。</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝是相对于浅拷贝的，深拷贝要做到对引用变量的整体拷贝，也就是把堆中的值也拷贝过来，这时候，修改新变量的值不会对原有变量产生影像。那我们如何做到深拷贝呢？</p><h3 id="暴力深拷贝"><a href="#暴力深拷贝" class="headerlink" title="暴力深拷贝"></a>暴力深拷贝</h3><p>我们知道，对一个基本变量类型的拷贝，是可以完全不对原有变量的值造成影响的。并且每个引用类型都是由基本数据类型构成的。所以可以考虑使用暴力方法把对象的每一层都进行基本类型的拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> deepclone = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-built_in">Array</span>.isArray(obj):[]?&#123;&#125;;<br>       <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> (obj) === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>                <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> (obj[key] === <span class="hljs-string">&quot;object&quot;</span>)) &#123;<br>                    result[key] = deepclone(obj[key]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[key] = obj[key];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方法就是通过暴力的方法来进行每一层的复制的深拷贝，但是这个方法存在存在可能成环的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> deepclone = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, parent = <span class="hljs-literal">null</span></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> result = <span class="hljs-built_in">Array</span>.isArray(obj) ? [] : &#123;&#125;;<br>    <span class="hljs-keyword">let</span> _parent = parent;<br>    <span class="hljs-keyword">while</span> (_parent) &#123;<br>        <span class="hljs-keyword">if</span> (_parent.originalParent === obj) &#123;<br>            <span class="hljs-keyword">return</span> _parent.currentResult;<br>        &#125;<br>        _parent = _parent.parent;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (obj &amp;&amp; <span class="hljs-keyword">typeof</span> (obj) === <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br>                <span class="hljs-keyword">if</span> (obj[key] &amp;&amp; <span class="hljs-keyword">typeof</span> (obj[key] === <span class="hljs-string">&quot;object&quot;</span>)) &#123;<br>                    result[key] = deepclone(obj[key], &#123;<br>                        parent: parent,<br>                        originalParent: obj,<br>                        currentResult: result<br>                    &#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[key] = obj[key];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这个方法则可以避免成环问题。</p><h3 id="数组的拷贝"><a href="#数组的拷贝" class="headerlink" title="数组的拷贝"></a>数组的拷贝</h3><p>通过自带的<strong>slice()</strong>,可以实现一维数组的深拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1=[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">var</span> arr2=arr1.slice();<br><span class="hljs-built_in">console</span>.log(arr1);<span class="hljs-comment">//&#123;3,4,5&#125;</span><br><span class="hljs-built_in">console</span>.log(arr2);<span class="hljs-comment">//&#123;3,4,5&#125;</span><br></code></pre></td></tr></table></figure><p>上面这个方法只对一维数组有用，多维数组的话还是浅拷贝。</p><h3 id="对象的拷贝"><a href="#对象的拷贝" class="headerlink" title="对象的拷贝"></a>对象的拷贝</h3><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><p>Object.assign()可以对一维对象进行拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1=&#123;<br>    a:<span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">var</span> obj2=<span class="hljs-built_in">Object</span>.assign(&#123;&#125;,obj1);<br></code></pre></td></tr></table></figure><p>如果是多维对象，那这个方法就不适用了，多维中的其他对象依旧会是浅拷贝。</p><h4 id="JSON-parse-JSON-stringify-obj"><a href="#JSON-parse-JSON-stringify-obj" class="headerlink" title="JSON.parse(JSON.stringify(obj))"></a>JSON.parse(JSON.stringify(obj))</h4><p>这个方法是用了JSON的方法，JSON.stringify(obj)会将对象转换为字符串，然后JSON.parse会将字符串转换为对象。通过这个方法可以实现多维对复制，但会忽略undefined和任意的函数以及symbol。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1=&#123;<br>    a:<span class="hljs-number">1</span>,<br>    b:&#123;<br>        c:<span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj2=<span class="hljs-built_in">JSON</span>.parse(<span class="hljs-built_in">JSON</span>.stringify(obj1));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
